{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Events","scrollEvent","register","to","element","console","log","arguments","scrollSpy","update","remove","class","className","href","icon","faGithubAlt","spy","smooth","duration","src","alt","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTA6EeA,G,kMArEXC,SAAOC,YAAYC,SAAS,SAAS,SAASC,EAAIC,GAChDC,QAAQC,IAAI,QAASC,cAGvBP,SAAOC,YAAYC,SAAS,OAAO,SAASC,EAAIC,GAC9CC,QAAQC,IAAI,MAAOC,cAGrBC,YAAUC,W,6CAGVT,SAAOC,YAAYS,OAAO,SAC1BV,SAAOC,YAAYS,OAAO,S,+BAI1B,OACE,6BACA,yBAAKC,MAAM,cACT,yBAAKC,UAAU,+BACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,oCAAd,iBAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,eACb,uBAAGC,KAAK,4BAA4BD,UAAU,kCAAiC,kBAAC,IAAD,CAAiBE,KAAMC,WAM9G,yBAAKH,UAAU,YACb,kBAAC,OAAD,CAAMT,GAAG,WAAWa,KAAK,EAAMC,QAAQ,EAAMC,SAAU,KACrD,wBAAIN,UAAU,wBAAuB,0BAAMA,UAAU,SAAhB,YAEvC,6BACA,6BACA,yBAAKA,UAAU,aACb,wBAAIA,UAAU,8BAAd,YACA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,sBAAqB,yBAAKA,UAAU,mBAAmBO,IAAI,kCAAkCC,IAAI,QAChH,yBAAKR,UAAU,2BAA0B,8gBACzC,4BACE,sCACA,sCACA,0CACA,qCACA,qCAEF,mGAAwE,uBAAGC,KAAK,6BAAR,MAAxE,4CAKJ,6BACA,8BAEF,yBAAKD,UAAU,SAASS,MAAO,CAAC,mBAAoB,YAAY,6BAAK,mC,GA7DzDC,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5bda4f28.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithubAlt, faTwitter, faDiscord } from '@fortawesome/free-brands-svg-icons';\r\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  componentDidMount(){\r\n    Events.scrollEvent.register('begin', function(to, element) {\r\n      console.log(\"begin\", arguments);\r\n    });\r\n \r\n    Events.scrollEvent.register('end', function(to, element) {\r\n      console.log(\"end\", arguments);\r\n    });\r\n \r\n    scrollSpy.update();\r\n  }\r\n  componentWillUnmount(){\r\n    Events.scrollEvent.remove('begin');\r\n    Events.scrollEvent.remove('end');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <div class=\"center-div\">\r\n        <div className=\"container-fluid text-center\">\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <h1 className=\"text-black font-weight-bold jake\">Jake Harper</h1>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 mt-4\">\r\n              <a href=\"https://github.com/lil-j/\" className=\"circle github shadow ml-1 mr-1\"><FontAwesomeIcon icon={faGithubAlt} /></a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"about-me\">\r\n        <Link to=\"about-me\" spy={true} smooth={true} duration={800} >\r\n          <h1 className=\"text-center arrowdiv\"><span className=\"arrow\">â†“</span></h1>\r\n        </Link>\r\n        <br/>\r\n        <br/>\r\n        <div className=\"container\">\r\n          <h1 className=\"text-dark font-weight-bold\">About Me</h1>\r\n          <div className=\"row text-dark\">\r\n            <div className=\"col-lg-4 col-sm-12\"><img className=\"img-fluid shadow\" src=\"https://i.imgur.com/MJAuf7L.jpg\" alt=\"me\"/></div>\r\n            <div className=\"col-lg-8 col-sm-12 pt-3\"><p>Hey, I'm Jake! I love running, taking photos, making videos, and hanging out with friends- but my true passion is computer programming. After starting with making simple python-based 'bots' using the Discord API, I quickly saw it as a business opportunity, and grew upon that for multiple months. A year later I have expanded into different areas of programming such as full-stack web applications and even working with artificial intelligence. Some of the languages I am most proficient in are:</p>\r\n            <ul>\r\n              <li>Python</li>\r\n              <li>NodeJS</li>\r\n              <li>HTML + CSS</li>\r\n              <li>React</li>\r\n              <li>Next</li>\r\n            </ul>\r\n            <p>If you have any questions, or wanna get in touch, feel free to email <a href=\"mailto:jke.hrpr@gmail.com\">me</a> or hit me up on Discord @ lilj#0001.</p>\r\n            \r\n            </div>\r\n          </div>\r\n        </div>\r\n        <br/>\r\n        <br/>\r\n      </div>\r\n      <div className=\"bottom\" style={{'background-color': '#1a1a1a'}}><br/><br/></div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}